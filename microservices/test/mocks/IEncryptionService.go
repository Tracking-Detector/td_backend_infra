// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IEncryptionService is an autogenerated mock type for the IEncryptionService type
type IEncryptionService struct {
	mock.Mock
}

// CompareHashAndPassword provides a mock function with given fields: hash, pw
func (_m *IEncryptionService) CompareHashAndPassword(hash string, pw string) bool {
	ret := _m.Called(hash, pw)

	if len(ret) == 0 {
		panic("no return value specified for CompareHashAndPassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hash, pw)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateApiKey provides a mock function with given fields:
func (_m *IEncryptionService) GenerateApiKey() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKey")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HashPassword provides a mock function with given fields: password
func (_m *IEncryptionService) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIEncryptionService creates a new instance of IEncryptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEncryptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEncryptionService {
	mock := &IEncryptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
