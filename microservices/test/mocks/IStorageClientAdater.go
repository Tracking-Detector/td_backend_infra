// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// IStorageClientAdater is an autogenerated mock type for the IStorageClientAdater type
type IStorageClientAdater struct {
	mock.Mock
}

// BucketExists provides a mock function with given fields: ctx, bucketName
func (_m *IStorageClientAdater) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	ret := _m.Called(ctx, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for BucketExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, bucketName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: ctx, bucketName, fileURI, options
func (_m *IStorageClientAdater) GetObject(ctx context.Context, bucketName string, fileURI string, options minio.GetObjectOptions) (io.ReadSeekCloser, error) {
	ret := _m.Called(ctx, bucketName, fileURI, options)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 io.ReadSeekCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (io.ReadSeekCloser, error)); ok {
		return rf(ctx, bucketName, fileURI, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) io.ReadSeekCloser); ok {
		r0 = rf(ctx, bucketName, fileURI, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadSeekCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, fileURI, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: ctx, bucketName, options
func (_m *IStorageClientAdater) ListObjects(ctx context.Context, bucketName string, options minio.ListObjectsOptions) <-chan minio.ObjectInfo {
	ret := _m.Called(ctx, bucketName, options)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 <-chan minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, minio.ListObjectsOptions) <-chan minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.ObjectInfo)
		}
	}

	return r0
}

// MakeBucket provides a mock function with given fields: ctx, bucketName, options
func (_m *IStorageClientAdater) MakeBucket(ctx context.Context, bucketName string, options minio.MakeBucketOptions) error {
	ret := _m.Called(ctx, bucketName, options)

	if len(ret) == 0 {
		panic("no return value specified for MakeBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, minio.MakeBucketOptions) error); ok {
		r0 = rf(ctx, bucketName, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutObject provides a mock function with given fields: ctx, bucketName, fileName, pr, objectSize, options
func (_m *IStorageClientAdater) PutObject(ctx context.Context, bucketName string, fileName string, pr io.Reader, objectSize int64, options minio.PutObjectOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, fileName, pr, objectSize, options)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, fileName, pr, objectSize, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, fileName, pr, objectSize, options)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, fileName, pr, objectSize, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBucketVersioning provides a mock function with given fields: ctx, bucketName, config
func (_m *IStorageClientAdater) SetBucketVersioning(ctx context.Context, bucketName string, config minio.BucketVersioningConfiguration) error {
	ret := _m.Called(ctx, bucketName, config)

	if len(ret) == 0 {
		panic("no return value specified for SetBucketVersioning")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, minio.BucketVersioningConfiguration) error); ok {
		r0 = rf(ctx, bucketName, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIStorageClientAdater creates a new instance of IStorageClientAdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStorageClientAdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStorageClientAdater {
	mock := &IStorageClientAdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
