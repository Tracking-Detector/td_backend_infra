// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "tds/shared/models"

	mock "github.com/stretchr/testify/mock"
)

// RequestRepository is an autogenerated mock type for the RequestRepository type
type RequestRepository struct {
	mock.Mock
}

// CountDocuments provides a mock function with given fields: ctx, url
func (_m *RequestRepository) CountDocuments(ctx context.Context, url string) (int64, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAll provides a mock function with given fields: ctx
func (_m *RequestRepository) DeleteAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllFilteredByUrlPaged provides a mock function with given fields: ctx, url, page, pageSize
func (_m *RequestRepository) FindAllFilteredByUrlPaged(ctx context.Context, url string, page int, pageSize int) ([]*models.RequestData, error) {
	ret := _m.Called(ctx, url, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindAllFilteredByUrlPaged")
	}

	var r0 []*models.RequestData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.RequestData, error)); ok {
		return rf(ctx, url, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.RequestData); ok {
		r0 = rf(ctx, url, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.RequestData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, url, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *RequestRepository) FindByID(ctx context.Context, id string) (*models.RequestData, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.RequestData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.RequestData, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.RequestData); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RequestData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTransaction provides a mock function with given fields: ctx, fn
func (_m *RequestRepository) InTransaction(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for InTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMany provides a mock function with given fields: ctx, requests
func (_m *RequestRepository) InsertMany(ctx context.Context, requests []*models.RequestData) error {
	ret := _m.Called(ctx, requests)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.RequestData) error); ok {
		r0 = rf(ctx, requests)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, c
func (_m *RequestRepository) Save(ctx context.Context, c *models.RequestData) error {
	ret := _m.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RequestData) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamByDataset provides a mock function with given fields: ctx, dataset
func (_m *RequestRepository) StreamByDataset(ctx context.Context, dataset string) (<-chan *models.RequestData, <-chan error) {
	ret := _m.Called(ctx, dataset)

	if len(ret) == 0 {
		panic("no return value specified for StreamByDataset")
	}

	var r0 <-chan *models.RequestData
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan *models.RequestData, <-chan error)); ok {
		return rf(ctx, dataset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan *models.RequestData); ok {
		r0 = rf(ctx, dataset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *models.RequestData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) <-chan error); ok {
		r1 = rf(ctx, dataset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// NewRequestRepository creates a new instance of RequestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestRepository {
	mock := &RequestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
