// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Tracking-Detector/td_backend_infra/microservices/shared/models"
	mock "github.com/stretchr/testify/mock"
)

// IExportRunService is an autogenerated mock type for the IExportRunService type
type IExportRunService struct {
	mock.Mock
}

// ExistByExporterIDAndRecducer provides a mock function with given fields: ctx, exporterId, reducer
func (_m *IExportRunService) ExistByExporterIDAndRecducer(ctx context.Context, exporterId string, reducer string) (bool, error) {
	ret := _m.Called(ctx, exporterId, reducer)

	if len(ret) == 0 {
		panic("no return value specified for ExistByExporterIDAndRecducer")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, exporterId, reducer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, exporterId, reducer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, exporterId, reducer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *IExportRunService) GetAll(ctx context.Context) ([]*models.ExportRun, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.ExportRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.ExportRun, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.ExportRun); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExportRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByExporterID provides a mock function with given fields: ctx, exporterId
func (_m *IExportRunService) GetByExporterID(ctx context.Context, exporterId string) ([]*models.ExportRun, error) {
	ret := _m.Called(ctx, exporterId)

	if len(ret) == 0 {
		panic("no return value specified for GetByExporterID")
	}

	var r0 []*models.ExportRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.ExportRun, error)); ok {
		return rf(ctx, exporterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.ExportRun); ok {
		r0 = rf(ctx, exporterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExportRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, exporterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IExportRunService) GetByID(ctx context.Context, id string) (*models.ExportRun, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.ExportRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.ExportRun, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ExportRun); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExportRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, exportRun
func (_m *IExportRunService) Save(ctx context.Context, exportRun *models.ExportRun) (*models.ExportRun, error) {
	ret := _m.Called(ctx, exportRun)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *models.ExportRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExportRun) (*models.ExportRun, error)); ok {
		return rf(ctx, exportRun)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExportRun) *models.ExportRun); ok {
		r0 = rf(ctx, exportRun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExportRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ExportRun) error); ok {
		r1 = rf(ctx, exportRun)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIExportRunService creates a new instance of IExportRunService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExportRunService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExportRunService {
	mock := &IExportRunService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
