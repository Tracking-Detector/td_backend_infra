// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// IStorageService is an autogenerated mock type for the IStorageService type
type IStorageService struct {
	mock.Mock
}

// DownloadFile provides a mock function with given fields: ctx, bucketName, fileURI, destination
func (_m *IStorageService) DownloadFile(ctx context.Context, bucketName string, fileURI string, destination string) error {
	ret := _m.Called(ctx, bucketName, fileURI, destination)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucketName, fileURI, destination)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBucketStructure provides a mock function with given fields: bucketName, prefix
func (_m *IStorageService) GetBucketStructure(bucketName string, prefix string) (interface{}, error) {
	ret := _m.Called(bucketName, prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketStructure")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (interface{}, error)); ok {
		return rf(bucketName, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(bucketName, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bucketName, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: ctx, bucketName, filename
func (_m *IStorageService) GetObject(ctx context.Context, bucketName string, filename string) (io.ReadSeekCloser, error) {
	ret := _m.Called(ctx, bucketName, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 io.ReadSeekCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadSeekCloser, error)); ok {
		return rf(ctx, bucketName, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadSeekCloser); ok {
		r0 = rf(ctx, bucketName, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadSeekCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: ctx, bucketName, fileName, pr, objectSize, contentType
func (_m *IStorageService) PutObject(ctx context.Context, bucketName string, fileName string, pr io.Reader, objectSize int64, contentType string) error {
	ret := _m.Called(ctx, bucketName, fileName, pr, objectSize, contentType)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, string) error); ok {
		r0 = rf(ctx, bucketName, fileName, pr, objectSize, contentType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyBucketExists provides a mock function with given fields: ctx, bucketName
func (_m *IStorageService) VerifyBucketExists(ctx context.Context, bucketName string) {
	_m.Called(ctx, bucketName)
}

// NewIStorageService creates a new instance of IStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStorageService {
	mock := &IStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
