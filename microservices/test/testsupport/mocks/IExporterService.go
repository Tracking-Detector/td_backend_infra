// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Tracking-Detector/td_backend_infra/microservices/shared/models"
	mock "github.com/stretchr/testify/mock"
)

// IExporterService is an autogenerated mock type for the IExporterService type
type IExporterService struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *IExporterService) FindByID(ctx context.Context, id string) (*models.Exporter, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Exporter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Exporter, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Exporter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Exporter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllExporter provides a mock function with given fields: ctx
func (_m *IExporterService) GetAllExporter(ctx context.Context) ([]*models.Exporter, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllExporter")
	}

	var r0 []*models.Exporter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Exporter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Exporter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Exporter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitInCodeExports provides a mock function with given fields: ctx
func (_m *IExporterService) InitInCodeExports(ctx context.Context) {
	_m.Called(ctx)
}

// IsValidExporter provides a mock function with given fields: ctx, identifier
func (_m *IExporterService) IsValidExporter(ctx context.Context, identifier string) bool {
	ret := _m.Called(ctx, identifier)

	if len(ret) == 0 {
		panic("no return value specified for IsValidExporter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, identifier)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIExporterService creates a new instance of IExporterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExporterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExporterService {
	mock := &IExporterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
